package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;

@TeleOp
public class TwoControllersTeleOp extends LinearOpMode
{
	public static final boolean
		SMOOTH_CONTROLS = false,
		REVERSE_CONTROLS = false;

    @Override
    public void runOpMode() throws InterruptedException
	{
        Hardware hardware = new Hardware(hardwareMap, telemetry);

        hardware.init();
        waitForStart();

        DrivetrainSpeedUpdateThread driveSpeed = new DrivetrainSpeedUpdateThread(hardware, dt.FL, dt.BL, dt.FR, dt.BR);
        driveSpeed.start();

        SlidesThread slidesThread = new SlidesThread(hardware);
        slidesThread.start();

        GrabberThread grabberThread = new GrabberThread(hardware);
        grabberThread.start();

        while (opModeIsActive()) {

            telemetry.addData("claw position: ", hardware.grabber.claw.getPosition());
            telemetry.addData("wrist position: ", hardware.grabber.wrist.getPosition());
            telemetry.addData("slides: ", hardware.slides.getCurrentPosition());
            telemetry.addData("slides target: ", hardware.slides.getTargetPosition());
            telemetry.addData("elbow: ", hardware.elbow1.getPosition());

            telemetry.update();
        }
    }

    public class DrivetrainSpeedUpdateThread extends Thread {

        Hardware hardware;
        DcMotor FL;
        DcMotor BL;
        DcMotor FR;
        DcMotor BR;

        public DrivetrainSpeedUpdateThread(Hardware hardware, DcMotor m1, DcMotor m2, DcMotor m3, DcMotor m4) {
            this.hardware = hardware;
            FL = m1;
            BL = m2;
            FR = m3;
            BR = m4;
        }

        @Override
        public void run() {
            double speedIncrement = .05;

            while (opModeIsActive()) {

                // smooth controls
                if (gamepad1.back) {
                    smooth_controls = true;
                    reverse_controls = false;
                }
                // default control mode
                else if (gamepad1.right_bumper) {
                    smooth_controls = false;
                    reverse_controls = false;
                }
                // reverse controls
                else if (gamepad1.left_bumper) {
                    smooth_controls = false;
                    reverse_controls = true;
                }

                double y = -gamepad1.left_stick_y; // Remember, this is reversed!
                double x = gamepad1.left_stick_x;
                double rx = (reverse_controls) ? -gamepad1.right_stick_x : gamepad1.right_stick_x;
                double slow = .2;

                if (gamepad1.left_trigger > .3) {
                    y *= slow;
                    x *= slow;
                    rx *= slow;
                }

                double FLTargetSpeed = clamp(y + x + rx, -1, 1);
                double BLTargetSpeed = clamp(y - x + rx, -1, 1);
                double FRTargetSpeed = clamp(y - x - rx, -1, 1);
                double BRTargetSpeed = clamp(y + x - rx, -1, 1);

                if (reverse_controls) {
                    FLTargetSpeed = clamp(-y + x + rx, -1, 1);
                    BLTargetSpeed = clamp(-y - x + rx, -1, 1);
                    FRTargetSpeed = clamp(-y - x - rx, -1, 1);
                    BRTargetSpeed = clamp(-y + x - rx, -1, 1);
                }

                if (smooth_controls) { // Smooth acceleration & deceleration
                    adjustMotorPower(FL, FLTargetSpeed, speedIncrement);
                    adjustMotorPower(BL, BLTargetSpeed, speedIncrement);
                    adjustMotorPower(FR, FRTargetSpeed, speedIncrement);
                    adjustMotorPower(BR, BRTargetSpeed, speedIncrement);
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                /*
                else if (constant_controls) { // Move one tile in a cardinal direction
                    if (gamepad1.dpad_up) {
                        hardware.dt.driveForward(1, .8);
                    }
                    else if (gamepad1.dpad_down) {
                        hardware.dt.driveBackward(1, .8);
                    }
                    else if (gamepad1.dpad_left) {
                        hardware.dt.strafeLeft(1, .8);
                    }
                    else if (gamepad1.dpad_right) {
                        hardware.dt.strafeRight(1, .8);
                    }
                }
                 */
                else { // Normal controls
                    setMotorPowers(hardware, FLTargetSpeed, BLTargetSpeed, FRTargetSpeed, BRTargetSpeed);
                }
            }
        }
    }

    public class SlidesThread extends Thread {
        Hardware hardware;
        DcMotor slides;
        SlidesTarget slidesPosition = null;

        public SlidesThread(Hardware hardware) {
            this.hardware = hardware;
            slides = hardware.slides;
            slidesPosition = Hardware.slidesPosition;
        }

        public void run() {
            boolean front = true;
            boolean elbow_changed = false;
            while (opModeIsActive()) {
                // flip elbow and wrist
                if (gamepad2.a && !elbow_changed) {
                    if (front) {
                        try {hardware.flipElbowAndWrist(true);} catch (InterruptedException e) {}
                        front = false;
                    }
                    else {
                        try {hardware.flipElbowAndWrist(false);} catch (InterruptedException e) {}
                        front = true;
                    }
                    elbow_changed = true;
                }
                else if (!gamepad2.a) {
                    elbow_changed = false;
                }

                // move elbow up or down slightly
                hardware.elbowMove(clamp(slidesPosition.elbow_position - (gamepad2.right_trigger * .07) + (gamepad2.left_trigger * .07), 0, 1));

                if (gamepad2.dpad_up) {
                    slidesPosition = SlidesTarget.BACK_HIGH;
                    if (front) {
                        front = false;
                    }
                    try {
                        hardware.flipElbowAndWrist(true, slidesPosition.elbow_position);
                    } catch (InterruptedException ignored) {
                    }
                } else if (gamepad2.dpad_left) {
                    slidesPosition = SlidesTarget.BACK_MIDDLE;
                    if (front) {
                        front = false;
                    }
                    try {
                        hardware.flipElbowAndWrist(true, slidesPosition.elbow_position);
                    } catch (InterruptedException ignored) {
                    }
                } else if (gamepad2.dpad_right) {
                    slidesPosition = SlidesTarget.BACK_LOW;
                    if (front) {
                        front = false;
                    }
                    try {
                        hardware.flipElbowAndWrist(true, slidesPosition.elbow_position);
                    } catch (InterruptedException ignored) {
                    }
                } else if (gamepad2.dpad_down) {
                    slidesPosition = SlidesTarget.FRONT_GROUND;
                    if (!front) {
                        front = true;
                    }
                    try {

                        hardware.slides.setTargetPosition(slidesPosition.slides_position);
                        hardware.flipElbowAndWrist(false);
                    } catch (InterruptedException ignored) {
                    }
                }
                hardware.slides.setTargetPosition(slidesPosition.slides_position);

                if (hardware.slides.getCurrentPosition() > slidesPosition.slides_position) {
                    hardware.slides.setPower(clamp(0.2 + (hardware.slides.getCurrentPosition() / (double) (SlidesTarget.BACK_HIGH.slides_position)), 0, 1));
                }
                else if (hardware.slides.getCurrentPosition() < slidesPosition.slides_position) {
                    hardware.slides.setPower(1);
                }
                else if (hardware.slides.getCurrentPosition() == slidesPosition.slides_position) {
                    hardware.slides.setPower(0);
                }
                // hardware.elbowMove(slidesPosition.elbow_position);
            }

        }
    }

    public class GrabberThread extends Thread {
        Hardware hardware;
        Grabber grabber;

        public GrabberThread(Hardware hardware) {
            this.hardware = hardware;
            grabber = hardware.grabber;
        }

        public void run() {
            boolean claw_changed = false; //Outside of loop()
            boolean wrist_changed = false;
            while (opModeIsActive()) {

                // Toggle x button to open/close claw
                if (gamepad2.x && !claw_changed) {
                    if (grabber.isClosed) {
                        grabber.openClaw();
                    } else {
                        grabber.closeClaw();
                    }
                    claw_changed = true;
                } else if (!gamepad2.x) {
                    claw_changed = false;
                }

                // Toggle y button to flip grabber
                if (gamepad2.y && !wrist_changed) {
                    if (grabber.isFlipped) {
                        grabber.rightGrabberFace();
                    } else {
                        grabber.flipGrabberFace();
                    }
                    wrist_changed = true;
                } else if (!gamepad2.y) {
                    wrist_changed = false;
                }


            }
        }
    }


    public void adjustMotorPower(DcMotor motor, double targetSpeed, double speedIncrement) {
        double speed = motor.getPower();
        if (speed > targetSpeed) {
            motor.setPower((speed > targetSpeed + speedIncrement) ? speed - speedIncrement : targetSpeed);
        } else if (speed < targetSpeed) {
            motor.setPower((speed < targetSpeed - speedIncrement) ? speed + speedIncrement : targetSpeed);
        }
    }

    public void setMotorPowers(Hardware hardware, double FLspeed, double BLspeed, double FRspeed, double BRspeed) {
        hardware.dt.FL.setPower(FLspeed);
        hardware.dt.FR.setPower(FRspeed);
        hardware.dt.BL.setPower(BLspeed);
        hardware.dt.BR.setPower(BRspeed);
    }

    public void resetSlides(Hardware hardware) {
        hardware.slides.setTargetPosition(SlidesTarget.FRONT_GROUND.slides_position);
        hardware.elbow1.setPosition(SlidesTarget.FRONT_GROUND.elbow_position);
        hardware.elbow2.setPosition(SlidesTarget.FRONT_GROUND.elbow_position);
    }


}
